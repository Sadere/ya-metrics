// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/metrics/v1/metrics.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricsServiceV1_SaveMetricsBatchV1_FullMethodName = "/metrics.v1.MetricsServiceV1/SaveMetricsBatchV1"
	MetricsServiceV1_GetMetricV1_FullMethodName        = "/metrics.v1.MetricsServiceV1/GetMetricV1"
)

// MetricsServiceV1Client is the client API for MetricsServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsServiceV1Client interface {
	SaveMetricsBatchV1(ctx context.Context, in *SaveMetricsBatchRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMetricV1(ctx context.Context, in *GetMetricRequestV1, opts ...grpc.CallOption) (*GetMetricResponseV1, error)
}

type metricsServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewMetricsServiceV1Client(cc grpc.ClientConnInterface) MetricsServiceV1Client {
	return &metricsServiceV1Client{cc}
}

func (c *metricsServiceV1Client) SaveMetricsBatchV1(ctx context.Context, in *SaveMetricsBatchRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MetricsServiceV1_SaveMetricsBatchV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceV1Client) GetMetricV1(ctx context.Context, in *GetMetricRequestV1, opts ...grpc.CallOption) (*GetMetricResponseV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricResponseV1)
	err := c.cc.Invoke(ctx, MetricsServiceV1_GetMetricV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceV1Server is the server API for MetricsServiceV1 service.
// All implementations must embed UnimplementedMetricsServiceV1Server
// for forward compatibility.
type MetricsServiceV1Server interface {
	SaveMetricsBatchV1(context.Context, *SaveMetricsBatchRequestV1) (*emptypb.Empty, error)
	GetMetricV1(context.Context, *GetMetricRequestV1) (*GetMetricResponseV1, error)
	mustEmbedUnimplementedMetricsServiceV1Server()
}

// UnimplementedMetricsServiceV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricsServiceV1Server struct{}

func (UnimplementedMetricsServiceV1Server) SaveMetricsBatchV1(context.Context, *SaveMetricsBatchRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMetricsBatchV1 not implemented")
}
func (UnimplementedMetricsServiceV1Server) GetMetricV1(context.Context, *GetMetricRequestV1) (*GetMetricResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricV1 not implemented")
}
func (UnimplementedMetricsServiceV1Server) mustEmbedUnimplementedMetricsServiceV1Server() {}
func (UnimplementedMetricsServiceV1Server) testEmbeddedByValue()                          {}

// UnsafeMetricsServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServiceV1Server will
// result in compilation errors.
type UnsafeMetricsServiceV1Server interface {
	mustEmbedUnimplementedMetricsServiceV1Server()
}

func RegisterMetricsServiceV1Server(s grpc.ServiceRegistrar, srv MetricsServiceV1Server) {
	// If the following call pancis, it indicates UnimplementedMetricsServiceV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricsServiceV1_ServiceDesc, srv)
}

func _MetricsServiceV1_SaveMetricsBatchV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMetricsBatchRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceV1Server).SaveMetricsBatchV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsServiceV1_SaveMetricsBatchV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceV1Server).SaveMetricsBatchV1(ctx, req.(*SaveMetricsBatchRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsServiceV1_GetMetricV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceV1Server).GetMetricV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricsServiceV1_GetMetricV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceV1Server).GetMetricV1(ctx, req.(*GetMetricRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsServiceV1_ServiceDesc is the grpc.ServiceDesc for MetricsServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.v1.MetricsServiceV1",
	HandlerType: (*MetricsServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveMetricsBatchV1",
			Handler:    _MetricsServiceV1_SaveMetricsBatchV1_Handler,
		},
		{
			MethodName: "GetMetricV1",
			Handler:    _MetricsServiceV1_GetMetricV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/metrics/v1/metrics.proto",
}
